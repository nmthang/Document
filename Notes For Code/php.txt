1/  htaccess: Rewrite
  https://www.addedbytes.com/articles/for-beginners/url-rewriting-for-beginners/
  http://httpd.apache.org/docs/2.0/misc/rewriteguide.html
  
  https://www.cheatography.com/davechild/cheat-sheets/mod-rewrite/
  Regular Expression: https://www.cheatography.com/davechild/cheat-sheets/regular-expressions/
  
2/ Apache docs:
  http://httpd.apache.org/docs/2.0/mod/mod_rewrite.html
  http://httpd.apache.org/docs/2.0/rewrite/rewrite_guide.html
  Regular Expression
    https://httpd.apache.org/docs/current/rewrite/intro.html
    
  http://apple.stackexchange.com/questions/68836/where-can-i-download-safari-for-windows
  https://wordpress.org/plugins/users-ultra/
  
  
3/ Laravel:
  Route: 
        Route::match(['get'],'/user/login', 'UserController@index');
        Route::any('foo', function () {
            //
        });
        
  Store uploaded files:
      https://www.quora.com/Where-is-the-best-place-to-store-uploaded-files-in-Laravel
      https://gist.github.com/Sentences/3945396
      https://www.codetutorial.io/laravel-5-file-upload-storage-download/
        
  Middleware:
      Authentication: https://laravel.com/docs/5.1/authentication
      Run command line: php artisan make:auth 
      
      //Get base url in view
      {{URL::to('/user/logout')}}
      
      // Vanilla PHP
      <?php echo csrf_field(); ?>
      
      // Blade Template Syntax
      {{ csrf_field() }}
      
      
      
  Model: 
      https://laravel.com/docs/5.1/eloquent#eloquent-model-conventions
      https://laravel.com/docs/5.1/queries
      Create model: 
        1/ php artisan make:model Flight 
            + table name:  `flights`
              indicate tabele: protected $table = 'my_flights';
            + primaryKey:
              default: id
              specific: protected $primaryKey = 'my_id';
              
            + Timestamps: column created_at, updated_at
              public $timestamps = false;
              
            + Function:
                - $count = App\Flight::where('active', 1)->count();
                
            + Create new record:
                  $flight = new Flight;
                  $flight->name = $request->name;
                  $flight->save();
                  
            + Update:
                - Mutiple records:
                    App\Flight::where('active', 1)
                                ->where('destination', 'San Diego')
                                ->update(['delayed' => 1]);
                                
            + Fillable & guarded:
                - protected $fillable = ['name'];
                - protected $guarded = ['price'];
                    --> all attributes except for price will be mass assignable.
                    
            + Delete:
                - Retreive and delete:
                    $flight = App\Flight::find(1);
                    $flight->delete();
                    
                - Delete by key
                    App\Flight::destroy(1);
                    App\Flight::destroy([1, 2, 3]);
                    
                - Delete by query:
                    $deletedRows = App\Flight::where('active', 0)->delete();
                    
            + Query Scopes
                - Define:
                    - prefix an Eloquent model method with `scope`
                        public function scopeOfType($query, $type)
                        {
                            return $query->where('type', $type);
                        }
                    - call scope method
                        $users = App\User::ofType('admin')->get();
            
                
4/ PDO class: refer: http://php.net/manual/en/class.pdo.php
     - Create: 
        $dns = 'mysql:host=localhost;port=3307;dbname=demo-laravel';
        $pdo = new PDO($dns, 'root', '');
        $pdo->exec('set names utf8');
	$pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
	
	   - Select:
	      - must be call: $stt->fetchAll()
	      - get count: $stt->fetchColumn() / $stt->rowCount()
	   
	   - Update/insert:
	      - NOT need call: fetchAll()
	      - get affected rows: $stt->rowCount()
	        
	   
	   - Transaction:
  	      $pdo->beginTransaction();
  	      $pdo->commit();
  	      $pdo->rollback();
  	    
  - SQL select user contains digit
  
  	SELECT * 
	FROM users
	WHERE 
		`name` LIKE '2'
		OR `name` LIKE '%,2,%'
		OR `name`  LIKE '2,%'
		OR `name`  LIKE '%,2'
- Get next Sunday:	http://stackoverflow.com/questions/4293174/grab-all-wednesdays-in-a-given-month-in-php
	
	      
	      
	      
	      
      
      
      
      
      
      
      
